"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
// NOTE: generate some of the testdata file. Many others are generated by the script:
// https://github.com/microsoft/health-cards/blob/generate-test-files/generate-examples/src/index.ts
var fs_1 = __importDefault(require("fs"));
var path_1 = __importDefault(require("path"));
var node_jose_1 = __importDefault(require("node-jose"));
var utils_1 = require("./utils");
var outdir = 'testdata';
function generateAndStoreKey(outFileName, keyGenArgs, count, isPrivate, omit) {
    if (count === void 0) { count = 1; }
    if (isPrivate === void 0) { isPrivate = false; }
    if (omit === void 0) { omit = ''; }
    return __awaiter(this, void 0, void 0, function () {
        var outFilePath, keystore, i, jwkSet;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    outFilePath = path_1.default.join(outdir, outFileName);
                    if (!!fs_1.default.existsSync(outFilePath)) return [3 /*break*/, 5];
                    console.log("Generating " + outFilePath);
                    keystore = node_jose_1.default.JWK.createKeyStore();
                    i = 0;
                    _a.label = 1;
                case 1:
                    if (!(i < count)) return [3 /*break*/, 4];
                    return [4 /*yield*/, keystore.generate(keyGenArgs.kty, keyGenArgs.size, keyGenArgs.props)];
                case 2:
                    _a.sent();
                    _a.label = 3;
                case 3:
                    i++;
                    return [3 /*break*/, 1];
                case 4:
                    jwkSet = keystore.toJSON(isPrivate);
                    if (omit) {
                        // TODO: delete this property
                    }
                    fs_1.default.writeFileSync(outFilePath, JSON.stringify(jwkSet));
                    _a.label = 5;
                case 5: return [2 /*return*/];
            }
        });
    });
}
void generateAndStoreKey('valid_key.json', { kty: 'EC', size: 'P-256', props: { alg: 'ES256', crv: 'P-256', use: 'sig' } });
void generateAndStoreKey('private_key.json', { kty: 'EC', size: 'P-256', props: { alg: 'ES256', crv: 'P-256', use: 'sig' } }, 1, true);
void generateAndStoreKey('valid_keys.json', { kty: 'EC', size: 'P-256', props: { alg: 'ES256', crv: 'P-256', use: 'sig' } }, 3);
void generateAndStoreKey('wrong_kid_key.json', { kty: 'EC', size: 'P-256', props: { alg: 'ES256', crv: 'P-256', use: 'sig', kid: 'ThisIsNotTheThumbprintOfTheKey' } });
void generateAndStoreKey('wrong_curve_key.json', { kty: 'EC', size: 'P-384', props: { alg: 'ES384', crv: 'P-384', use: 'sig' } });
void generateAndStoreKey('wrong_use_key.json', { kty: 'EC', size: 'P-256', props: { alg: 'ES256', crv: 'P-256', use: 'enc' } });
void generateAndStoreKey('wrong_alg_key.json', { kty: 'EC', size: 'P-256', props: { alg: 'ES256K', crv: 'P-256', use: 'sig' } });
void generateAndStoreKey('wrong_kty_key.json', { kty: 'RSA', size: 2048 });
function generateMultiVCHealthCardFile(outFileName, inFileNames) {
    var outFilePath = path_1.default.join(outdir, outFileName);
    if (!fs_1.default.existsSync(outFilePath)) {
        console.log("Generating " + outFilePath);
        var hc = { verifiableCredential: [] };
        hc.verifiableCredential = inFileNames.map(function (file) {
            var hc = utils_1.parseJson(fs_1.default.readFileSync(path_1.default.join(outdir, file)).toString('utf-8'));
            if (hc) {
                return hc.verifiableCredential;
            }
            else {
                return [];
            }
        }).reduce(function (a, c) { return a === null || a === void 0 ? void 0 : a.concat(c); }, []);
        fs_1.default.writeFileSync(outFilePath, JSON.stringify(hc));
    }
}
generateMultiVCHealthCardFile('test-example-00-e-file-multi-jws.smart-health-card', ['example-00-e-file.smart-health-card', 'example-01-e-file.smart-health-card']);
//# sourceMappingURL=generate-test-data.js.map